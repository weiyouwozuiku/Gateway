name: Go Build, Test and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REPO_NAME: "Gateway"
  DOCKER_IMAGE_NAME: "gateway"

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get latest tag
        id: get_latest_tag
        run: |
            echo $(git describe --tags $(git rev-list --tags --max-count=1)
            echo ::set-output name=latest_tag::$(git describe --tags $(git rev-list --tags --max-count=1))
      # 读取版本号并更新
      - name: Read version
        id: read_version
        run: |
          echo ${{ steps.get_latest_tag.outputs.latest_tag }}
          latest_tag=$("${{ steps.get_latest_tag.outputs.latest_tag }}")
          if [[ "$latest_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Latest tag matches the pattern vX.X.X"
            major_version=$(echo $latest_tag | cut -d '.' -f 1 | sed 's/v//')
            minor_version=$(echo $latest_tag | cut -d '.' -f 2)
            patch_version=$(echo $latest_tag | cut -d '.' -f 3)
            echo "Major version: $major, Minor version: $minor, Patch version: $patch"
          else
            echo "Latest tag does not match the pattern vX.X.X"
            major_version=1
            minor_version=0
            patch_version=0
          fi
          echo ::set-output name=major_version::$major_version
          echo ::set-output name=minor_version::$minor_version
          echo ::set-output name=patch_version::$patch_version

      # 检查出当前提交的 commit message 并设置输出变量
      - name: Check commit message
        id: check_commit_message
        run: echo ::set-output name=commit_message::$(git log --format=%B -n 1 ${{ github.sha }})

  build-test:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

#      - name: Set tag name
#        id: tag_name
#        run: |
#          TAG_NAME=$(echo ${GITHUB_REF##*/})_$(date +%s)
#          echo "TAG_NAME is $TAG_NAME"
#          echo "::set-output name=tag_name::$TAG_NAME"
#        shell: bash
#
#      - name: Use tag name in next step
#        run: |
#          echo "Tag name is: ${{ steps.tag_name.outputs.tag_name }}"
#        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.3'

      - name: Get dependencies
        run: |
          go mod tidy
          go mod download
          ls -al
          pwd

      - name: Run tests
        run: |
          echo $GITHUB_WORKSPACE
          # go test ./...

      - name: Build binary
        run: GOOS=linux GOARCH=amd64 go build -o ${{env.REPO_NAME}}

  release:
    needs: [setup-environment,build-test]
    if:  github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'save')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: ECHO PWD
        run: ls -al
      - name: Update version
        id: update_version
        if: ${{ needs.setup-environment.outputs.commit_message != 'save' }}
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            exit 0
          fi

          if [[ "${{ github.event_name }}" == "push" ]]; then
            COMMIT_MESSAGE=${{ needs.setup-environment.outputs.commit_message }}
            MAJOR_BUMP=false
            MINOR_BUMP=false

            if [[ "$COMMIT_MESSAGE" == "add"* ]]; then
              MAJOR_BUMP=true
            elif [[ "$COMMIT_MESSAGE" == "fix"* ]]; then
              MINOR_BUMP=true
            fi

            # 读取环境变量中的版本号和计数器值
            MAJOR_VERSION=${{ needs.setup-environment.outputs.major_version }}
            MINOR_VERSION=${{ needs.setup-environment.outputs.minor_version }}
            PATCH_VERSION=${{ needs.setup-environment.outputs.patch_version }}

            if [[ "$MAJOR_BUMP" == true && "$MINOR_BUMP" == false ]]; then
              NEW_MAJOR_VERSION=$(( $MAJOR_VERSION + 1 ))
              NEW_MINOR_VERSION=0
              NEW_PATCH_VERSION=0
            elif [[ "$MINOR_BUMP" == true ]]; then
              NEW_MAJOR_VERSION=$MAJOR_VERSION
              NEW_MINOR_VERSION=$(( $MINOR_VERSION + 1 ))
              NEW_PATCH_VERSION=0
            else
              NEW_MAJOR_VERSION=$MAJOR_VERSION
              NEW_MINOR_VERSION=$MINOR_VERSION
              NEW_PATCH_VERSION=$(( $PATCH_VERSION + 1 ))
            fi
             # 更新版本号到文件中
            echo "$NEW_MAJOR_VERSION.$NEW_MINOR_VERSION.$NEW_PATCH_VERSION" > $VERSION_FILE
            echo ::set-output name=version_info::$(echo "$NEW_MAJOR_VERSION.$NEW_MINOR_VERSION.$NEW_PATCH_VERSION" )
          fi

      - name: echo version info
        run: echo ${{ steps.update_version.outputs.version_info }}

#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKER_PULL_SECRET }}
#
#      - name: Build and push Docker images
#        uses: docker/build-push-action@v4
#        with:
#          push: true
#          tags: |
#            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
#            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.update_version.version_info.outputs.version_info }}
#          release_name: v ${{ steps.update_version.version_info.outputs.version_info }}
#          body: Automated release created by GitHub Actions.
#          draft: false
#          prerelease: false
#
#      - name: Upload Binary to Release
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./${{env.REPO_NAME}}
#          asset_name: ${{env.REPO_NAME}}
#          asset_content_type: application/octet-stream
